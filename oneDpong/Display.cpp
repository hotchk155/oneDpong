#include "Arduino.h"
#include "Display.h"
#include "Matrix.h"

CDisplay Display;

/*
6,9,9,15,9,9,9, //A
14,9,9,14,9,9,14, //B
6,9,8,8,8,9,6, //C
14,9,9,9,9,9,14, //D
15,8,8,14,8,8,15, //E
15,8,8,14,8,8,8, //F
6,9,8,11,9,9,7, //G
9,9,9,15,9,9,9, //H
7,2,2,2,2,2,7, //I
15,1,1,1,1,9,6, //J
9,10,12,8,12,10,9, //K
8,8,8,8,8,8,15, //L
17,27,21,17,17,17,17, //M
9,9,13,11,9,9,9, //N
6,9,9,9,9,9,6, //O
14,9,9,14,8,8,8, //P
6,9,9,9,11,9,7, //Q
14,9,9,14,9,9,9, //R
6,9,8,6,1,9,6, //S
31,4,4,4,4,4,4, //T
9,9,9,9,9,9,6, //U
9,9,9,9,9,10,12, //V
17,17,17,17,21,27,17, //W
17,17,10,4,10,17,17, //X
17,17,10,4,4,4,4, //Y
31,1,2,4,8,16,31, //Z

0,0,14,1,7,9,7, //a
8,8,14,9,9,9,14, //b
0,0,6,9,8,9,6, //c
1,1,7,9,9,9,7, //d
0,0,6,9,15,8,6, //e
3,4,4,6,4,4,4, //f
0,7,9,9,7,1,14, //g
8,8,14,9,9,9,9, //h
1,0,1,1,1,1,1, //i
1,0,1,1,1,1,2, //j
8,8,9,10,12,10,9, //k
2,2,2,2,2,2,1, //l
0,0,30,21,21,17,17, //m
0,0,14,9,9,9,9, //n
0,0,6,9,9,9,6, //o
0,14,9,9,14,8,8, //p
0,7,9,9,7,1,1, //q
0,0,14,9,8,8,8, //r
0,0,7,8,6,1,14, //s
2,2,3,2,2,2,1, //t
0,0,9,9,9,9,7, //u
0,0,9,9,9,10,12, //v
0,0,17,17,21,21,27, //w
0,0,17,10,4,10,17, //x
0,0,9,9,7,1,14, //y
0,0,31,2,4,8,31, //z


6,9,11,13,9,9,6, //0
2,6,2,2,2,2,7, //1
6,9,0,6,8,8,15, //2
6,9,1,6,1,9,6, //3
1,3,5,9,15,1,1, //4
15,8,8,6,1,9,6, //5
6,9,8,14,9,9,6, //6
15,1,1,2,4,4,4, //7
6,9,9,6,9,9,6, //8
6,9,9,7,1,9,6, //9

1,1,1,1,1,0,1, //!
2,5,1,2,2,0,2, //?
1,2,2,2,2,2,1, //(
2,1,1,1,1,1,2, //)

*/
const byte digits[] PROGMEM = 
{
  0b00111100, 0b01000110, 0b01001010, 0b01010010, 0b01100010, 0b00111100, 
  0b00001000, 0b00011000, 0b00001000, 0b00001000, 0b00001000, 0b00111110, 
  0b00111100, 0b01000010, 0b00000010, 0b00111100, 0b01000000, 0b01111110, 
  0b00111100, 0b01000010, 0b00011100, 0b00000010, 0b01000010, 0b00111100, 
  0b00001100, 0b00010100, 0b00100100, 0b01000100, 0b01111110, 0b00000100, 
  0b01111110, 0b01000000, 0b01111100, 0b00000010, 0b00000010, 0b01111100, 
  0b00111100, 0b01000000, 0b01111100, 0b01000010, 0b01000010, 0b00111100, 
  0b01111110, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 
  0b00111100, 0b01000010, 0b00111100, 0b01000010, 0b01000010, 0b00111100, 
  0b00111100, 0b01000010, 0b01000010, 0b00111110, 0b00000010, 0b00111100
};

void CDisplay::showDigits(int a, int b, byte shift)
{  
  

  const byte *pa = (a<0)? NULL : &digits[6 * (a%10)];
  const byte *pb = (b<0)? NULL : &digits[6 * (b%10)];
  Matrix.m_DrawBuffer[0] = 0;
  Matrix.m_DrawBuffer[7] = 0;
  Matrix.m_DrawBuffer[8] = 0;
  Matrix.m_DrawBuffer[15] = 0;
  for(int i = 0; i<6; i++) {
    Matrix.m_DrawBuffer[1+i] = pa? pgm_read_byte_near(pa + i)<<shift : 0;
    Matrix.m_DrawBuffer[9+i] = pb? pgm_read_byte_near(pb + i)>>shift : 0;
  }
}

void CDisplay::showCount(int i)
{
  i %= 100;
  showDigits(i/10, i%10,0);
  Matrix.flip();
}
  
void CDisplay::showScores(int a, int b)
{
  showDigits(a,b,1);
  for(int i=0; i<8; i+=2) {
    Matrix.m_DrawBuffer[i] |= 1;
    Matrix.m_DrawBuffer[9+i] |= 128;
  }
  Matrix.flip();
}

